<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal xsl:version="1.0" exsl:keep_exsl_namespace="">
  <name>%GpuComputeMediaHotspotsAtypeName</name>
  <shortName>%GpuComputeMediaHotspotsAtypeName</shortName>
  <description>%GpuComputeMediaHotspotsDescription</description>
  <abbreviation>gh</abbreviation>
  <alias>gpu-hotspots</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <iconClass>gpu solid</iconClass>
  <property name="helpId">intel.phe.configs.gpu_hotspots</property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=localhost,ssh')"/>
  <xsl:if test="exsl:ctx('targetOS')!='Windows' and exsl:ctx('targetOS')!='Linux' and exsl:ctx('targetOS')!='MacOSX'">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicableToOs')"/>
  </xsl:if>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="gpu_usage" select="document('config://analysis_type/include/gpu_usage.xsl?errorLevel=warning')"/>
  <xsl:variable name="gpuUsageAvailable" select="$gpu_usage//root/variables/gpuUsageAvailable"/>
  <xsl:variable name="knobsParams">
   <xsl:choose>
    <xsl:when test="$gpuUsageAvailable = 'true'">
     <params isGPUUsageVisible="false" isGPUUsageAvailable="true" isOpenCLCollectionVisible="true" gpuApplyStateKnob1="metricsGroup" gpuApplyStateKnobValue1="instruction-count" gpuApplyStateKnob2="gpuProfilingModeAtk" gpuApplyStateKnobValue2="source-analysis"/>
    </xsl:when>
    <xsl:otherwise>
     <params isGPUUsageVisible="false" isGPUUsageAvailable="false" isOpenCLCollectionVisible="true" gpuApplyStateKnob1="metricsGroup" gpuApplyStateKnobValue1="instruction-count" gpuApplyStateKnob2="gpuProfilingModeAtk" gpuApplyStateKnobValue2="code-level-analysis"/>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:variable name="knobsParamsName">
   <xsl:text>config://analysis_type/include/knobs.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($knobsParams)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="commonKnobs" select="document($knobsParamsName)"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='gpuUsageCollection']"/>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%InKernelProfilingViewpointName</defaultValue>
  </stringKnob>
  <groupKnob id="groupForGPUCustomControl">
   <knobProperty name="knob_control_id">gpuProfilingGroup</knobProperty>
   <knobs>
    <enumKnob id="gpuProfilingModeAtk" displayName="%GpuProfilingMode" boolean:visible="true" cliName="profiling-mode">
     <description>%GpuProfilingModeDescription</description>
     <values>
      <value displayName="%GpuProfilingModeGPUMetrics">characterization</value>
      <value displayName="%GpuProfilingModeGPUMetrics2">source-analysis</value>
      <defaultValue>characterization</defaultValue>
     </values>
    </enumKnob>
    <enumKnob id="metricsGroup" boolean:visible="true" cliName="characterization-mode">
     <description>%GpuHotspotsCharacterizationCli</description>
     <knobProperty name="apply_state">gpuProfilingModeAtk=characterization</knobProperty>
     <values>
      <value displayName="%GpuMetricsOverview">overview</value>
      <value displayName="%GpuComputeBasic">global-local-accesses</value>
      <xsl:if test="exsl:ctx('gpuPlatformIndex', 0)&gt;=6">
       <value displayName="%GpuComputeExtended">compute-extended</value>
      </xsl:if>
      <xsl:if test="exsl:ctx('connectionType','') != 'ghs'">
       <value displayName="%GpuFullCompute">full-compute</value>
      </xsl:if>
      <value displayName="%GpuMetricsDynInstCount">instruction-count</value>
      <defaultValue>overview</defaultValue>
     </values>
    </enumKnob>
    <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBW']"/>
    <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='gpuOpenCLCollection']"/>
    <xsl:copy-of select="$commonKnobs//knobs/doubleKnob[@id='gpuSamplingInterval']"/>
    <enumKnob id="profilingMode" boolean:visible="true" cliName="source-analysis">
     <description>%GpuHotspotsSourceAnalysisCli</description>
     <knobProperty name="apply_state">gpuProfilingModeAtk=source-analysis</knobProperty>
     <values>
      <value displayName="%GpuMetricsBBLatency">bb-latency</value>
      <value displayName="%GpuMetricsMemLatency">mem-latency</value>
      <defaultValue>bb-latency</defaultValue>
     </values>
    </enumKnob>
    <stringKnob id="kernelsToProfileAtk" displayName="%GpuProfilingKernels" cliName="computing-tasks-of-interest">
     <description>%GpuProfilingKernelsDescription</description>
     <defaultValue/>
     <knobProperty name="knob_control_id">KernelGrid</knobProperty>
    </stringKnob>
   </knobs>
  </groupKnob>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
  <xsl:variable name="mainEvents" select="$events//events/cpi"/>
  <xsl:variable name="commonDoc" select="document('config://collector/include/common.xsl')"/>
  <xsl:variable name="collectGTPin" select="string($commonDoc//common/variables/collectGTPin)"/>
  <xsl:if test="$collectGTPin = 'true'">
   <xsl:choose>
    <xsl:when test="exsl:ctx('isGTPinCollectionAvailable', '') = 'ErrorNotSupported'">
     <xsl:value-of select="exsl:error('%GpuProfilingNotSupported')"/>
    </xsl:when>
    <xsl:when test="exsl:ctx('isGTPinCollectionAvailable', '') = 'ErrorUnsupportedHardware'">
     <xsl:value-of select="exsl:error('%GpuProfilingUnsupportedHardware')"/>
    </xsl:when>
    <xsl:when test="exsl:ctx('isGTPinCollectionAvailable', '') = 'ErrorUnknownStatus'">
     <xsl:value-of select="exsl:error('%GpuProfilingCannotBeConfigured')"/>
    </xsl:when>
   </xsl:choose>
  </xsl:if>
  <collector id="runsa">
   <xsl:variable name="runtool" select="document('config://analysis_type/include/runtool.xsl')"/>
   <xsl:variable name="runtoolToUse" select="$runtool//variables/runtoolToUse"/>
   <xsl:attribute name="id">
    <xsl:value-of select="$runtoolToUse"/>
   </xsl:attribute>
   <xsl:variable name="gpuCollectionKnobs" select="document('config://analysis_type/include/gpu_collection_settings.xsl?gpuHotspots=true')"/>
   <xsl:copy-of select="$gpuCollectionKnobs//knobs/hostCollector/*"/>
   <xsl:if test="exsl:ctx('kernelsToProfileAtk', 0)">
    <collectorKnob knob="kernelsToProfile">
     <xsl:value-of select="exsl:ctx('kernelsToProfileAtk', '')"/>
    </collectorKnob>
   </xsl:if>
   <xsl:copy-of select="$gpuCollectionKnobs//knobs/inline/*"/>
   <xsl:copy-of select="$gpuCollectionKnobs//knobs/programming_apis/*"/>
   <xsl:variable name="gpu_usage" select="document('config://analysis_type/include/gpu_usage.xsl?errorLevel=warning')"/>
   <xsl:variable name="gpuUsageAvailable" select="$gpu_usage//root/variables/gpuUsageAvailable"/>
   <xsl:variable name="gpuUsageErrorMessage" select="$gpu_usage//root/variables/gpuUsageErrorMessage"/>
   <xsl:variable name="gpuUsageErrorReason" select="exsl:message('analysis_type', string($gpuUsageErrorMessage))"/>
   <xsl:if test="exsl:ctx('gpuProfilingModeAtk') = 'characterization'">
    <xsl:if test="exsl:ctx('metricsGroup') = 'overview'">
     <collectorKnob knob="gpuCounters">
      <xsl:text>overview</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'global-local-accesses'">
     <collectorKnob knob="gpuCounters">
      <xsl:text>global-local-accesses</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'compute-extended'">
     <xsl:choose>
      <xsl:when test="not($gpuUsageAvailable = 'true')">
       <xsl:variable name="message" select="exsl:message('analysis_type', '%ComputeExtendedNoGpuUsageError', string($gpuUsageErrorReason))"/>
       <xsl:value-of select="exsl:error($message)"/>
      </xsl:when>
      <xsl:otherwise>
       <collectorKnob knob="gpuCounters">
        <xsl:text>compute-extended</xsl:text>
       </collectorKnob>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'full-compute'">
     <collectorKnob knob="gpuCounters">
      <xsl:text>full-compute</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'instruction-count'">
     <collectorKnob knob="gpuProfilingMode">
      <xsl:text>instcount</xsl:text>
     </collectorKnob>
    </xsl:if>
   </xsl:if>
   <xsl:if test="exsl:ctx('gpuProfilingModeAtk') = 'source-analysis'">
    <xsl:if test="exsl:ctx('profilingMode') = 'bb-latency'">
     <collectorKnob knob="gpuProfilingMode">
      <xsl:text>bblatency</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('profilingMode') = 'mem-latency'">
     <collectorKnob knob="gpuProfilingMode">
      <xsl:text>memlatency</xsl:text>
     </collectorKnob>
    </xsl:if>
   </xsl:if>
   <xsl:if test="not($gpuUsageAvailable = 'true') and not(exsl:ctx('gpuUsageCollection', 'true')) and not($collectGTPin = 'true')">
    <xsl:variable name="message" select="exsl:message('analysis_type', '%NoGPUUsageWarning', string($gpuUsageErrorReason))"/>
    <xsl:value-of select="exsl:warning($message)"/>
   </xsl:if>
   <collectorKnob knob="gpuUsage">
    <xsl:value-of select="exsl:ctx('gpuUsageCollection', 'true')"/>
   </collectorKnob>
   <xsl:if test="not($collectGTPin = 'true')">
    <collectorKnob knob="gpuSamplingInterval">
     <xsl:value-of select="format-number(exsl:ctx('gpuSamplingInterval', 1), '#.####')"/>
    </collectorKnob>
   </xsl:if>
   <xsl:if test="not($collectGTPin = 'true') and exsl:ctx('gpuProfilingModeAtk') = 'characterization'">
    <xsl:copy-of select="$gpuCollectionKnobs//knobs/bandwidth/*"/>
   </xsl:if>
   <boolean:collectorKnob knob="inKernelProfilingAnalysis">true</boolean:collectorKnob>
  </collector>
 </analysis>
</bag>
